---
- name: CLUSTER - create vault storage directory
  ansible.builtin.file:
    path: "{{ vault_cluster_storage_path }}"
    state: directory

- name: CLUSTER - template the vault server config
  ansible.builtin.template:
    src: cluster-config.hcl.j2
    dest: "{{ vault_cluster_config_path }}"

- name: CLUSTER - start vault server
  community.docker.docker_container:
    name: vault-cluster
    state: started
    image: "{{ vault_image }}"
    command: vault server -config=/vault/config
    ports:
      - "{{ vault_cluster_port }}:{{ vault_cluster_port }}"
      - "{{ vault_cluster_cluster_port }}:{{ vault_cluster_cluster_port }}"
    volumes:
      - "{{ vault_cluster_storage_path }}:/vault/raft"
      - "{{ vault_cluster_config_path }}:/vault/config/config.hcl"
    capabilities:
      - IPC_LOCK
  become: true

- name: CLUSTER - init first vault cluster node
  ansible.builtin.shell: "vault operator init"
  retries: 3
  delay: 10
  register: cluster_init_output
  until: cluster_init_output.rc == 0
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_cluster_port }}"
    VAULT_TOKEN: "{{ hostvars[groups[\
      vault_unsealer_inv_group_name][0]]['unwrapped_token'] }}"
  when: groups[vault_cluster_inv_group_name][0] == inventory_hostname

- name: CLUSTER - save token and recovery keys
  ansible.builtin.set_fact:
    cluster_key_1: "{{ cluster_init_output.stdout_lines[0].split(' ')[3] }}"
    cluster_key_2: "{{ cluster_init_output.stdout_lines[1].split(' ')[3] }}"
    cluster_key_3: "{{ cluster_init_output.stdout_lines[2].split(' ')[3] }}"
    cluster_key_4: "{{ cluster_init_output.stdout_lines[3].split(' ')[3] }}"
    cluster_key_5: "{{ cluster_init_output.stdout_lines[4].split(' ')[3] }}"
    cluster_token: "{{ cluster_init_output.stdout_lines[6].split(' ')[3] }}"
  when: groups[vault_cluster_inv_group_name][0] == inventory_hostname
