---
- name: UNSEALER - create vault storage directory
  ansible.builtin.file:
    path: "{{ vault_unsealer_storage_path }}"
    state: directory

- name: UNSEALER - create vault vault_config
  ansible.builtin.template:
    src: unsealer-config.hcl.j2
    dest: "{{ vault_unsealer_config_path }}"

- name: UNSEALER - start vault server
  community.docker.docker_container:
    name: vault-unsealer
    state: started
    image: "{{ vault_image }}"
    command: vault server -config=/vault/config
    ports:
      - "{{ vault_unsealer_port }}:{{ vault_unsealer_port }}"
      - "{{ vault_unsealer_cluster_port }}:{{ vault_unsealer_cluster_port }}"
    volumes:
      - "{{ vault_unsealer_storage_path }}:/vault/raft"
      - "{{ vault_unsealer_config_path }}:/vault/config/config.hcl"
    capabilities:
      - IPC_LOCK
  become: true

- name: UNSEALER - init vault
  ansible.builtin.shell: "vault operator init"
  retries: 3
  delay: 10
  register: unsealer_init_output
  until: unsealer_init_output.rc == 0
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_unsealer_port }}"

- name: UNSEALER - save token and unseal keys
  ansible.builtin.set_fact:
    unsealer_key_1: "{{ unsealer_init_output.stdout_lines[0].split(' ')[3] }}"
    unsealer_key_2: "{{ unsealer_init_output.stdout_lines[1].split(' ')[3] }}"
    unsealer_key_3: "{{ unsealer_init_output.stdout_lines[2].split(' ')[3] }}"
    unsealer_key_4: "{{ unsealer_init_output.stdout_lines[3].split(' ')[3] }}"
    unsealer_key_5: "{{ unsealer_init_output.stdout_lines[4].split(' ')[3] }}"
    unsealer_token: "{{ unsealer_init_output.stdout_lines[6].split(' ')[3] }}"

# use echo with a space in front so the command will not appear in the history
- name: UNSEALER - useal the vault with key 1
  ansible.builtin.shell: " echo {{ item }} | xargs vault operator unseal"
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_unsealer_port }}"
  no_log: true
  loop:
    - "{{ unsealer_key_1 }}"
    - "{{ unsealer_key_2 }}"
    - "{{ unsealer_key_3 }}"

- name: UNSEALER - enable vault transit engine
  ansible.builtin.shell: "vault secrets enable transit"
  retries: 3
  delay: 10
  register: vault_is_ready
  until: vault_is_ready.rc == 0
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_unsealer_port }}"
    VAULT_TOKEN: "{{ unsealer_token }}"

- name: UNSEALER - create key for autounsealing
  ansible.builtin.shell: "vault write -f
    transit/keys/{{ vault_generic_policy_name }}"
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_unsealer_port }}"
    VAULT_TOKEN: "{{ unsealer_token }}"

- name: UNSEALER - create policy file
  ansible.builtin.template:
    src: autounseal.hcl.j2
    dest: "{{ vault_unsealer_policy_path }}"

- name: UNSEALER - write policy for autounsealing
  ansible.builtin.shell: "vault policy write
    {{ vault_generic_policy_name }} {{ vault_unsealer_policy_path }}"
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_unsealer_port }}"
    VAULT_TOKEN: "{{ unsealer_token }}"

- name: UNSEALER - create a client token
  ansible.builtin.shell: "vault token create
    -policy=\"{{ vault_generic_policy_name }}\" -wrap-ttl=120"
  register: unsealer_client_token
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_unsealer_port }}"
    VAULT_TOKEN: "{{ unsealer_token }}"

- name: UNSEALER - unwrap the secret
  ansible.builtin.shell: "vault unwrap"
  register: unsealer_unwrapped_token
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_unsealer_port }}"
    VAULT_TOKEN: "{{ unsealer_client_token.stdout_lines[2].split(' ')\
      [(unsealer_client_token.stdout_lines[2].split(' ')|length) - 1] }}"

- name: UNSEALER - set unwrapped token as a fact
  ansible.builtin.set_fact:
    unwrapped_token: "{{ unsealer_unwrapped_token.stdout_lines[2].split(' ')\
      [(unsealer_unwrapped_token.stdout_lines[2].split(' ')|length) - 1] }}"
